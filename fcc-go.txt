 ___________________________
| Author: VAIBHAV DWIVEDI  |
 --------------------------


================================================================================================================
#. VARIABLES
================================================================================================================
-> by default initialized to 0 as per their type

=>
   i := 10			// can be declared at function level not as package level			
 
   fmt.Println(i) 
   fmt.Printf("%v %T",i, i)	// like c


=>
var name string = "vaibhav"
var age int = 10
var sex string= "M"

is less readable as compared to below notation

var (
	name string = "vaibhav"
	age int = 10
	sex string= "M"
)


=> shadowing
----------------------------------------
package main
import (
	"fmt"
)

var age int = 0
func main() {
	fmt.Println(age)
	age := 23 		// this is not the redeclaration of the var age because of its scope and its called shadowing
	fmt.Println(age)
}


=>
package main
import (
	"fmt"
)

//package level var
var age int = 0			// means from the same package
var Age int= 10			// means exported from another package and imported here
func main() {
	fmt.Println(age)
	age := 23 		// block level var
	fmt.Println(age)
}


=> conversion
------------------------------------------
	var a int= 10
	
	// always a explicit conversion
	var b float32= float32(a)	// direct conversion produce error ie =a (not like c)
	fmt.Printf("%T", b)


-> a:= 12.4e7	//exponential number


================================================================================================================
#. PRIMITIVE TYPES
================================================================================================================

-> bool
---------------------------------------

	n := 1 == 1
	m := 2 == 1
	fmt.Printf("%v, %T \n", n, n)
	fmt.Printf("%v, %T ", m, m)

-> int
----------------------------------------
	var i int	// signed   -> can store both positive and negative number
	var i uint	// un-signed  -> can store only positive number 

-> string
----------------------------------------
package main

import "fmt"

func main() {
	var name string;
	fmt.Printf("%v %T\n", name, name)

	i := name == ""
	fmt.Printf("%v %T", i, i)		// true bool
}


-> can be concanated be can't be mutated
-----------------------------------------
package main

import "fmt"

func main() {
	s := "this is it"
	fmt.Println(s)

	// each byte of string is made from uint8
	fmt.Printf("%v %T",s[2], s[2])	//105, uint8

	s += " !bye"
	fmt.Println(s)
	s[2]="v"		// error
}


-> string are collection of byte
------------------------------------
package main

import "fmt"

func main() {
	s := "this is it"

	// string to byte
	b := []byte(s)

	// byte to string
	s2 := string(b)
	fmt.Printf("%v %T\n", b, b)	//[116 104 105 115 32 105 115 32 105 116] []uint8
	fmt.Printf("%v %T", s2, s2)	//this is it string
}




-> complex
----------------------------------------
package main

import "fmt"

func main() {

	// if complex is of 64 then real , imag both are half same for 128

	var a complex64
	fmt.Printf("%v %T\n\n", a, a)

	a = 5 + 3i
	fmt.Printf("%v %T\n", a, a)
	fmt.Printf("%v %T\n", real(a), real(a))
	fmt.Printf("%v %T", imag(a), imag(a))
}


-> operators
-------------------------------------------
package main

import "fmt"

func main() {
	a := 10 // 1010
	b := 3  // 0011

	fmt.Println(a | b) //1011
	fmt.Println(a & b) //0010
	fmt.Println(a ^ b) //1001

	// set it 1 when both the bits are unset ie 0
	fmt.Println(a &^ b) //0100

	v := 8
	fmt.Println(v >> 3) // v/2^3
	fmt.Println(v << 3) // v*2^3
}

-> we can take reminder of floating numbers


================================================================================================================
#. CONSTANTS
================================================================================================================

-> has to be inilitized at the compile time only
------------------------------------------------
package main

import "fmt"

func main() {
	const a int 
	a=10			// error
	fmt.Printf(a)	
}

also
------
package main

import (
	"fmt"
	"math"
)

func main() {
	const a float64= math.Sin(0.5)		// has to be compile time only
	fmt.Printf(a)
}



-> can't be changed/overwrite
------------------------------
package main

import "fmt"

func main() {
	const myConst int = 23

	fmt.Printf("%v %T", myConst, myConst)

	 myConst= 24	//error
}



-> but CONSTANT can be shadowed
-------------------
package main

import (
	"fmt"
)

const a int64= 64
func main() {
	const a int16= 16
	fmt.Printf("%v %T", a, a)	//16 int16
}


-> can be used in artithmatic operations with the var ( but type has to be same)

-> but changes its if not not hard typed
-----------------------------------------
package main

import (
	"fmt"
)

func main() {
	const a = 16
	fmt.Printf("%v %T\n", a, a)

	var b int32 = 10
	fmt.Printf("%v %T\n", a+b, a+b)
	fmt.Printf("%v %T", a, a)

}

output-	16 int
	26 int32
	16 int



================================================================================================================
#. ARRAYS and SLICES
================================================================================================================
-> 
package main

import (
	"fmt"
)

func main() {
	// if we dont assign value then they get assigned automatically
	marks := [3]int{100, 90, 99} // also [...]

	fmt.Printf("%v %T\n", marks, marks)
	fmt.Printf("%v %T\n--------------------\n", marks[0], marks[0])

	// 2-D Array\
	var identityMats [3][3]int = [3][3]int{[3]int{1, 0, 0}, [3]int{0, 1, 0}, [3]int{0, 0, 1}}

	fmt.Printf("%v %T", identityMats, identityMats)
}


-> in GO if size is defined then we actually copy the underlying data not just passing the refrence 
   but if, 
	size is variable then we implicitly passing the refrence of the 0th index element not whole data (i.e. slices)


-> slices
-----------------------

-> slices are dynamic so initial size need not to be assigned

->
package main

import (
	"fmt"
)

func main() {
	a:= []int {1, 2, 3, 4, 5, 6, 7, 8, 9}
	b:= a[:]
	c:= a[3:]
	d:= a[:7]
	e:= a[2:7]

	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(c)
	fmt.Println(d)
	fmt.Println(e)
}


-> we can also use make function to create dynamic content like slices, map etc
-------------------------------------------------------------------------------
package main

import (
	"fmt"
)

func main() {
	a := make([]int, 3)
	fmt.Printf("%v length is:%v and capacity is:%v\n", a, len(a), cap(a)) // capacity doubles its size if reached

	// append is used to add element to the ds
	a = append(a, 10)
	fmt.Printf("%v length is:%v and capacity is:%v\n", a, len(a), cap(a))

	a = append(a, 13, 15, 17)
	fmt.Printf("%v length is:%v and capacity is:%v\n", a, len(a), cap(a))

	b := []int{101, 102}

	// concatination of two slices using spread operator
	a = append(a, b...) // backward not forward
	fmt.Printf("%v length is:%v and capacity is:%v\n", a, len(a), cap(a))
}


output: [0 0 0] length is:3 and capacity is:3
	[0 0 0 10] length is:4 and capacity is:6
	[0 0 0 10 13 15 17] length is:7 and capacity is:12
	[0 0 0 10 13 15 17 101 102] length is:9 and capacity is:12




-> also used for stack/queue operation
---------------------------------------------
package main

import "fmt"

func main() {
	a := []int{12, 13, 14, 15, 15}
	fmt.Println(a)

	// PUSH
	a = append(a, 20)
	fmt.Println(a)

	// POP front
	a = a[1:]
	fmt.Println(a)

	// POP back
	a = a[:len(a)-1]
	fmt.Println(a)

	// POP middle
	position := 2
	a = append(a[:position-1], a[position:]...)
	fmt.Println(a)
}


================================================================================================================
#. MAPS & STRUCTS
================================================================================================================
-> MAP
---------------------
package main

import "fmt"

func main() {
	m := map[int]string{10: "vaibhav dwivedi", 11: "deadpool"}
	fmt.Println(m)
	fmt.Println(m[10])

	m2 := make(map[string]string)
	m2["vaibhav dwivedi"] = "vaibhav07nov@gmail.com"
	m2["deadpool"] = "coderpukku@gmail.com"
	fmt.Println(m2)
	fmt.Println(m2["deadpool"])
}



output- map[10:vaibhav dwivedi 11:deadpool]
	vaibhav dwivedi
	map[deadpool:coderpukku@gmail.com vaibhav dwivedi:vaibhav07nov@gmail.com]
	coderpukku@gmail.com



-> map cannot have slices as their key type but can have arrays as their key 

-> delete and key, value
--------------------------------
package main

import "fmt"

func main() {
	m := map[int]string{10: "vaibhav dwivedi", 11: "deadpool", 5: "shubh"}
	fmt.Println(m)

	delete(m, 5)
	fmt.Println(m)

	// if that ele is not present then it'll return value as false
	key, value := m[7]
	println(key, value)

	key, value = m[11]
	println(key, value)
}

output- map[5:shubh 10:vaibhav dwivedi 11:deadpool]
	map[10:vaibhav dwivedi 11:deadpool]
	 false
	deadpool true


-> STRUCT
-----------------------------------------------

package main

import "fmt"

type doctor struct {
	fees        int
	name        string
	compounders []string
}

// if we are using this to some other places (exported) then make each field in Pascal case
func main() {
	// we can also omit any of structure fields
	doc1 := doctor{
		fees: 1000,
		name: "Gaurang dwivedi",
		// if it's type slice then we have to give its type
		compounders: []string{"ujjawal", "vaibhav"},
	}
	fmt.Println(doc1)
	fmt.Println(doc1.name, doc1.fees, doc1.compounders[0])
	

	// ANONYMOUS STRUCTURE -> need no name and type keyword
	name := struct {
		firstName  string
		secondName string
	}{firstName: "Vaibhav", secondName: "Dwivedi"}


	// ANONYMOUS FUNCTION
	func() {
		fmt.Println(name)
	}()
	

	// Unlike maps and slice they are simply value type ( not refrence type)
	name2 := name
	name2.firstName = "Ujjawal"
	fmt.Println(name2)
}


output- {1000 Gaurang dwivedi [ujjawal vaibhav]}
	Gaurang dwivedi 1000 ujjawal
	{Vaibhav Dwivedi}
	{Ujjawal Dwivedi}

-> struct Pointer
----------------------------
package main

import "fmt"

func main() {
	name := struct {
		firstName  string
		secondName string
	}{firstName: "Vaibhav", secondName: "Dwivedi"}

	// struct pointer
	namePointer := &name

	fmt.Println(name, namePointer)
}

output- {Vaibhav Dwivedi} &{Vaibhav Dwivedi}




-> struct has no inheritance but it can be connected using composition relationship
-------------------------------------------------------------------------------------
package main

import "fmt"

type animal struct {
	name   string
	weight int
}

// we are not creating field ie.. animal animal
type bird struct {
	animal
	canFly bool
}

func main() {
	b1 := bird{}
	b1.name = "sparrow"
	b1.weight = 7
	b1.canFly = true

	fmt.Println(b1, b1.name)

	// literal syntax
	b2 := bird{
		animal: animal{name: "emu", weight: 122},
		canFly: false,
	}
	fmt.Println(b2, b2.name)
}
 
output- {{sparrow 7} true} sparrow
	{{emu 122} false} emu



================================================================================================================
#. CONDITIONAL STATEMENTS 
================================================================================================================
-> inilitiazed if with expression
---------------------------------------------
package main

import "fmt"

func main() {
	m := map[string]int{"vaibhav": 23, "deadpool": 32, "renolds": 32}
	fmt.Println(m)

	if pop, ok:= m["deadpool"]; ok {
		fmt.Println(pop)
	} else if {
		fmt.Println("not found")
	}
}

output- map[deadpool:32 renolds:32 vaibhav:23]
	32




-> Short circuiting is checking of the condition is from left -> right and if left fails then, it won't go for next element



-> switch
-----------------------------------
package main

import "fmt"

func main() {
	i := 2

	switch i {
	case 1:
		fmt.Println("one")
	case 2:
		fmt.Println("two")
		fmt.Println("another line")
	default:
		fmt.Println("default")
	}
}



-> we can also provide multiple values to the case
---------------------------------------------------------------
package main

import "fmt"

func main() {
	i := 7

	switch i {
	case 1, 3, 5, 7, 9:
		fmt.Println("odd")
	case 2, 4, 6, 8:
		fmt.Println("even")
	default:
		fmt.Println("default")
	}
}



-> with initializer
-----------------------------------------------------
package main

import "fmt"

func main() {
	// switch with initializer
	switch i := 2 + 4; i {
	case 1, 3, 5, 7, 9:
		fmt.Println("odd")
	case 2, 4, 6, 8:
		fmt.Println("even")
	default:
		fmt.Println("default")
	}
}



-> switch without tag
---------------------------------------------------
package main

import "fmt"

func main() {
	i := 7
	switch {
	case i < 10:
		fmt.Println("less than 10")
		fmt.Println("another line")
	case i < 20:
		fmt.Println("less than 20")
	default:
		fmt.Println("default")
	}
}



-> here break keyword works similar to that break in for loop


================================================================================================================
#. LOOPS
================================================================================================================

-> for loop
----------------------------
package main

import "fmt"

func main() {
	for i:= 0; i< 5; i++ {
		fmt.Println(i)
	}
}



-> while loop
----------------------------
package main

import "fmt"

func main() {
	i:= 0;
	for i< 5 {
		fmt.Println(i)
		i++
	}
}


-> for multiple expression we dont have any comma so to do that
-----------------------------------------------------------------
package main

func main() {
	for i, j := 0, 2; i < 5 && j < 7; i, j = i+1, j+2 {
		println(i, j)
	}
}


-> plain for loop
-----------------------------------------------------------------
package main

import "fmt"

func main() {
	// continue can also be used if needed
	i := 0
	for {
		if i == 5 {
			break
		}
		fmt.Println(i)
		i++
	}
}


-> label breakis used when loop are nested and we want to come out of all the loop with just one break statement
----------------------------------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
loop:
	for i := 0; i < 5; i++ {
		for j := 0; j < 3; j++ {
			fmt.Println(i, j)
			if j == 2 {
				break loop
			}
		}
	}
}


-> for range loop used for collection like strings, arrays, slices, maps
-------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
	arr := []int{10, 20, 30}

	// can be used for collection
	for k, v := range arr {
		fmt.Println(k, v)
	}

	s := "vaibhav dwivedi"
	for k, v := range s {
		fmt.Println(k, string(v))
	}
}



================================================================================================================
#. POINTERS + FUNCTIONS
================================================================================================================
-> pointer
------------
package main

import (
	"fmt"
)

func main() {
	a := 10
	var b *int = &a
	fmt.Printf("%v %T", *b, b)	//10 *int
}




-> also all the things that are dynamic and their size can be increased will do implicit pointer assignment not copying thier data if assigned
   like -> dynamic array and maps etc




================================================================================================================
#. FUNCTIONS and METHODS
================================================================================================================
-> Pass by value
----------------------------------------------------------------
package main

import (
	"fmt"
)

func main() {
	a:= 10
	b:= 20
	fmt.Println("the addition of",a ,"and", b,"is:",addNumbers(a, b))
}

func addNumbers(a, b int) int {
	return a+b
}



-> Pass by reference
-------------------------------------------------------------------------
package main

import (
	"fmt"
)

func main() {
	a:= 10
	b:= 20
	fmt.Println("the addition of",a ,"and", b,"is:",addNumbers(&a, &b))
}

func addNumbers(a, b *int) int {
	*a= 100				// changes will get reflected everywhere
	*b= 200
	return *a + *b
}


-> with return type
---------------------------------------------------------------------------
package main

import (
	"fmt"
)

func main() {
	a:= 10
	b:= 20
	fmt.Println(addNumbers(a, b))
}

func addNumbers(a, b int) int {
	return a+b
}


-> return with error
----------------------------------------------------------------------------

package main

import (
	"fmt"
)

func main() {
	a := 10
	b := 0
	fmt.Println(addNumbers(a, b))

	ans, err := divideNumbers(a, b)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(ans)
}

func addNumbers(a, b int) int {
	return a + b
}

func divideNumbers(a, b int) (float64, error) {
	if b == 0 {
		err := fmt.Errorf("divisor can't be zero")
		return 0.0, err
	}
	return float64(a) / float64(b), nil
}


-> variatic parameters : they can only be passed at very last and can have only one VP per function
--------------------------------------------------------------------------------------------------
package main

import "fmt"

func main() {
	printArr(12, 13, 14, 15, 16)
}

func printArr(arr ...int) {
	fmt.Println(arr)
}


i.e. func fun(s string, values ...int) {
     }



-> we can also return address of local variable of the function
------------------------------------------------------------------
package main

import "fmt"

func main() {
	pointerReturned := printArr(12, 13, 14, 15, 16)
	fmt.Println(*pointerReturned)
}

func printArr(arr ...int) *int {
	fmt.Println(arr)
	sum := 0
	for _, v := range arr {
		sum += v
	}
	return &sum
}


-> anonymus function
----------------------------------------------------------------
package main

import "fmt"

func main() {
	func() {
		fmt.Println("hello bois")
	}()

	// as an expression
	hello := func() {
		fmt.Println("hello bois")
	}
	hello()

	
	for i := 0; i < 5; i++ {
		func() {
			fmt.Println(i)
		}()
	}

	// best practise is to pass the parameter inside the anonymus function if it depends
	for i := 0; i < 5; i++ {
		func(i int) {
			fmt.Println(i)
		}(i)
	}
}


-> anonymus function error handling
---------------------------------------------------------------------------
package main

import "fmt"

func main() {
	divide := func(num1 float64, num2 float64) (float64, error) {
		if num2 == 0 {
			return 0.0, fmt.Errorf("divided with 0")
		}
		return num1 / num2, nil
	}

	ans, err := divide(10, 0)
	if err != nil {
		fmt.Println(err)
		return
	}
	fmt.Println(ans)
}


-> METHODS
=================================================================================
-> method is a function with added prefix of some known context of any type ( like struct object)
---------------------------------------------------------------------------------------------------

package main

import "fmt"

func main() {
	// initializing struct object
	g := greeter{
		greeting: "hello boiii",
		name:     "vaibhav",
	}

	// method invocation
	g.greet(7)
}

// defining struct object
type greeter struct {
	greeting string
	name     string
}

// method
// and here we are recieving greeter as value type
func (g greeter) greet(fav int) {
	fmt.Println(g.name, "message is:", g.greeting, "and his fav number is:", fav)
}


-> this should be used for more control over data type and the function to be used

-> passing context as a pointer
-------------------------------------
package main

import "fmt"

func main() {
	// initializing struct object
	g := greeter{
		greeting: "hello boiii",
		name:     "vaibhav",
	}

	// method invocation
	g.greet(7)
	fmt.Println("greeting from main function:", g.greeting)
}

// defining struct object
type greeter struct {
	greeting string
	name     string
}

// method
// and here we are recieving greeter as value type
func (g *greeter) greet(fav int) {
	fmt.Println(g.name, "message is:", g.greeting, "and his fav number is:", fav)
	g.greeting = "bye"
	fmt.Println("message from method is:", g.greeting)
}



================================================================================================================
#. INTERFACES
================================================================================================================

-> from a nutshell it looks same as struct but unlike struct interface are used to define behaviour using methonds and function
	while, struct are used to define type of data
----------------------------------------------------------------------------------------------


package main

func main() {

}

// defining interface
type writer interface {
	// method accepting slice of byte are returning int, error
	Write([]byte) (int, error)
}

// for imlementation of interface we create it's console
type writerConsole struct{}

func ( cw writerConsole) 

